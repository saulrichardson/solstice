Logical issues identified in `src/gateway/` (July 2025)
=======================================================

Below is a concise review of the Gateway code focused on *semantic* (non-syntax)
problems that can lead to unexpected behaviour while leaving the service
running.  They mirror the style used in *INJESTION_LOGICAL_ISSUES.txt*.


1.  `middleware/retry.py`
------------------------

1-a  **Streaming retries are incomplete**
     Only the *initial* call to open the stream is retried.  If the provider
     drops the connection mid-stream the error bubbles up to the client.  Not
     strictly a bug but the docstring promises resilience against “transient
     network failures”, which is only partly fulfilled.
2.  `main.py`
-------------

2-a  **Cache key may be non-deterministic**
     The write-only cache serialises a Python dict with `json.dumps(sort_keys=True)`
     but still contains lists (e.g. `tools`) whose *order* could vary between
     otherwise identical requests, creating multiple files for equivalent
     inputs.  This **inflates storage** and defeats deduplication.

2-b  **Streaming error surfacing**
     Exceptions raised *before* an SSE stream is yielded propagate to the
     `StreamingResponse` without conversion to an HTTPException, resulting in
     a broken connection instead of a proper 5xx JSON error.  Clients receive
     an abrupt socket close rather than a well-formed error chunk.
Impact summary
--------------

Remaining issues are silent but affect reliability and resource usage:

• Incomplete retries can drop client connections during long streams.
• Order-sensitive cache keys create duplicate snapshot files.
• Early-stream errors surface as abrupt socket closes instead of JSON 5xx responses.

